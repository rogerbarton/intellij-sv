{
    parserClass="ch.rbarton.intellijsv.core.parser.SvParser"
    parserUtilClass="ch.rbarton.intellijsv.core.parser.SvParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    // Use extension methods instead so we can use kotlin, see https://github.com/JetBrains/Grammar-Kit/issues/70
     psiImplUtilClass="ch.rbarton.intellijsv.core.psi.mixin.SvPsiImplUtil"

    psiClassPrefix="Sv"
    psiImplClassSuffix="Impl"
    psiPackage="ch.rbarton.intellijsv.core.psi"
    psiImplPackage="ch.rbarton.intellijsv.core.psi.ext"

    elementTypeHolderClass="ch.rbarton.intellijsv.core.psi.SvTypes"
    elementTypeClass="ch.rbarton.intellijsv.core.psi.SvElementType"
    tokenTypeClass="ch.rbarton.intellijsv.core.psi.SvTokenType"

    tokens = [
        LBRACE      = '{'
        RBRACE      = '}'
        LBRACK      = '['
        RBRACK      = ']'
        LPARENSTAR  = '(*'
        LPAREN      = '('
        RPARENSTAR  = '*)'
        RPAREN      = ')'

        COLONCOLON  = '::'
        COLON       = ':'
        SEMICOLON   = ';'
        COMMA       = ','

        AT          = '@'
        SHA         = '#'
        SHASHA      = '##'
        DOT         = '.'
        UNDERSCORE  = '_'

        // Operators
        EQEQQS      = '==?'
        EQEQEQ      = '==='
        EQEQ        = '=='
        EQ          = '='
        EXCLEQQS    = '!=?'
        EXCLEQEQ    = '!=='
        EXCLEQ      = '!='
        EXCL        = '!'
        QUEST       = '?'

        PLUSEQ      = '+='
        PLUSPLUS    = '++'
        PLUS        = '+'
        MINUSEQ     = '-='
        MINUSGT     = '->'
        MINUSMINUS  = '--'
        MINUS       = '-'
        MULMUL      = '**'
        MULEQ       = '*='
        MUL         = '*'
        DIVEQ       = '/='
        DIV         = '/'
        PCTEQ       = '%='
        PCT         = '%'

        TILDAND     = '~&'
        TILDOR      = '~|'
        TILDHAT     = '~^'
        TILD        = '~'
        HATTILD     = '^~'
        HATEQ       = '^='
        HAT         = '^'

        GTEQ        = '>='
        GTGTGTEQ    = '>>>='
        GTGTEQ      = '>>='
        GTGTGT      = '>>>'
        GTGT        = '>>'
        GT          = '>'
        LTEQ        = '<='
        LTMINUSLT   = '<->'
        LTLTLTEQ    = '<<<='
        LTLTEQ      = '<<='
        LTLTLT      = '<<<'
        LTLT        = '<<'
        LT          = '<'

        OREQ        = '|='
        OROR        = '||'
        OR_         = '|'
        ANDEQ       = '&='
        ANDANDAND   = '&&&'
        ANDAND      = '&&'
        AND_        = '&'

        QUOT        = "'"

        // Literals
        TIME_LITERAL    = "regexp:\d[_\d]*(s|ms|us|ns|ps|fs)"
        BINARY_NUMBER   = "regexp:\d[_\d]*'[sS]?[bB][01XxZz?][_01XxZz?]*"
        OCTAL_NUMBER    = "regexp:\d[_\d]*'[sS]?[oO][0-7XxZz?][_0-7XxZz?]*"
        HEX_NUMBER      = "regexp:\d[_\d]*'[sS]?[hH][0-9ABCDEFXxZz?][_0-9ABCDEFXxZz?]*"
        UNSIGNED_NUMBER = 'regexp:\d[_\d]*'
        SPECIAL_NUMBER  = "regexp:'0|'1|'|x|X|z|Z"

        WHITE_SPACE     = 'regexp:[\s\r\n]+'
        IDENTIFIER      = 'regexp:[a-zA-Z_][a-zA-Z0-9_$]*'
        LINE_COMMENT    = 'regexp://.*'
        DOC_COMMENT     = 'regexp:/\*\*(.|\n)*?\*/'
        BLOCK_COMMENT   = 'regexp:/\*(.|\n)*?\*/'

        STRING_LITERAL  = "regexp:\"[^\"]*?\"" // Doesn't handle escapes
    ]

    generateTokenAccessors=true

    // Reduce size of PSI tree for recursive parts
    extends(".*Stmt|SeqBlock") = Statement
    extends(".*Expr") = Expr

    elementType(".+BinExpr") = BinaryExpr
    elementType(".+BinOp") = BinaryOperator

    // Performance for expressions, simplier error messages
    consumeTokenMethod("((?!.*_with_recover).*_recover)|(.*_first)|(.*Expr)") = "consumeTokenFast"
}

SvFile ::= [ (TimeunitsDeclaration ';' )* ] ModuleDeclaration *

// Generic Recovers

private Semicolon_recover ::= !';'
private CSV_recover ::= !(';' | ',' | ')' | '*)')   // Must include comma

// Meta Rules

private meta CSV ::= <<XSV <<item>> ','>>
private meta XSV ::= <<item>> ( <<sep>> <<item>> )* { pin(".*") = 1 }

// Trivial Rules

Label ::= ':' IDENTIFIER? {
    pin = 1
    implements = "ch.rbarton.intellijsv.core.psi.ext.SvReferenceOwner"
    mixin = "ch.rbarton.intellijsv.core.psi.mixin.SvLabelMixin"
}
UnsignedNumberRule ::= UNSIGNED_NUMBER
TimeLiteralRule ::= TIME_LITERAL

// Timeunits

TimeunitsDeclaration ::=

      timeunit TimeLiteralRule [ '/' TimeLiteralRule ]
    | timeprecision TimeLiteralRule {
    pin(".*") = 1
    recoverWhile = Semicolon_recover
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvTimeunitsDeclarationMixin"
}

// Module

ModuleDeclaration ::=

    AttributeInstance *
    module IDENTIFIER ModuleHeader ';'
    ModuleItem *
    endmodule [ Label ] {
    pin = 3
    implements = [ "ch.rbarton.intellijsv.core.psi.ext.SvNamedIdentifierOwner"
                    ]
    mixin = "ch.rbarton.intellijsv.core.psi.mixin.SvModuleDeclarationMixin"
    methods = [
        endmoduleLabel = "Label"
    ]
    }

ModuleHeader ::=

    [ '#' '(' [ <<CSV ParameterDeclaration>> ] ')' ]
    [     '(' [ <<CSV PortDeclaration>> ] ')' ] {
    pin(".*") = 1
    recoverWhile = Semicolon_recover
}

// Parameter Declarations

ParameterDeclaration ::= ParameterType Type IDENTIFIER UnpackedDimension * [ '=' Expr ] {
    pin = 1
    recoverWhile = CSV_recover
    methods = [ defaultValue = "Expr" ]
    implements = [ "ch.rbarton.intellijsv.core.psi.ext.SvNamedIdentifierOwner" ]
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvParameterDeclarationMixin"
}

ParameterType ::= parameter | localparam

// Port Declarations

PortDeclaration ::=

    AttributeInstance * PortDirection Type IDENTIFIER [ '=' ConstExpr ] {
    pin = 2
    recoverWhile = CSV_recover
    implements = [ "ch.rbarton.intellijsv.core.psi.ext.SvNamedIdentifierOwner" ]
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvPortDeclarationMixin"
    }

PortDirection ::= input | output | inout | ref

// Module Item

// TODO: use extends() to make psi tree shallower, like with Expr
ModuleItem ::=

      ParameterDeclaration ';'
    | TypeDeclaration ';'
    | ContinuousAssign ';'
    | AlwaysConstruct
    | InitialConstruct
    | FinalConstruct
    | ModuleInstantiation ';'
    | NetDeclaration ';'  // After ModuleInstantiation
    | GenerateRegion
    | TimeunitsDeclaration ';'
    | ModuleDeclaration {
        extends = "ch.rbarton.intellijsv.core.psi.mixin.SvModuleItemMixin"
    }

NetDeclaration ::= Type <<CSV NetDeclarationAssignment>> !'('{
    pin = 1
    recoverWhile = Semicolon_recover
}

NetDeclarationAssignment ::= IDENTIFIER UnpackedDimension * [ '=' Expr ] {
    implements = [ "ch.rbarton.intellijsv.core.psi.ext.SvNamedIdentifierOwner" ]
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvNetDeclarationAssignmentMixin"
}

IdentifierWithDefault ::= IDENTIFIER [ '=' Expr ]

ContinuousAssign ::= assign <<CSV ContinuousAssignItem>> {
    pin = 1
    recoverWhile = Semicolon_recover
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvContinuousAssignMixin"
}

ContinuousAssignItem ::= NetLvalue AssignOperator Expr {
    pin = 2
    recoverWhile = CSV_recover
    implements = [ "ch.rbarton.intellijsv.core.psi.ext.SvReferenceOwner" ]
    mixin = "ch.rbarton.intellijsv.core.psi.mixin.SvContinuousAssignItemMixin"
}

NetLvalue ::= HierarchicalIdentifier UnpackedDimension *

// Procedural blocks

InitialConstruct ::= initial Statement {
    pin = 1
}

AlwaysConstruct ::= AlwaysKeyword Statement {
    pin = 1
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvAlwaysConstructMixin"
}

FinalConstruct ::= final Statement {
    pin = 1
}

//noinspection BnfSuspiciousToken
AlwaysKeyword ::= always_comb | always_ff | always_latch | always

Statement ::=

    [ IDENTIFIER ':' ] AttributeInstance *
    (
          SeqBlock
        | AssignmentStmt ';'
        | ConditionalStmt
        | TimingControlStmt
    )

SeqBlock ::=

    begin [ Label ]
    BlockItem *
    Statement *
    end [ Label ] {
    pin = 1
    }

BlockItem ::=

    AttributeInstance * (
      TypeDeclaration
    | ParameterDeclaration
    ) ';'

AssignmentStmt ::= NetLvalue AssignOperator Expr {
    pin = 2
    recoverWhile = Semicolon_recover
}

ConditionalStmt ::=

    [ UniquePriority ]
    if '(' Expr ')'
        Statement
    ( else if '(' Expr ')'
        Statement ) *
    [ else
        Statement ] {
    pin = 2
    }

UniquePriority ::= unique | unique0 | priority

TimingControlStmt ::= ( EventControl | DelayControl | DelayCycle ) ( ';' | Statement )

EventControl ::=

    '@' (
      '(' ( EventExpression | '*' )')'
    | '*'
    | HierarchicalIdentifier
    ) {
    pin = 1
}

DelayControl ::= '#' ( DelayLiteral | '(' Expr ')' ) {
    pin = 1
}

DelayLiteral ::= UNSIGNED_NUMBER | TIME_LITERAL | IDENTIFIER | "1step"

DelayCycle ::= '##' ( UNSIGNED_NUMBER | IDENTIFIER | '(' Expr ')' ) {
    pin = 1
}

EventExpression ::=

      ParenEventExpression
    | BinaryEventExpression
    | AtomicEventExpression

AtomicEventExpression ::= [ EdgeIdentifier ] Expr [ iff Expr ] {
    extends = EventExpression
}

BinaryEventExpression ::= EventExpression ( or | ',' ) EventExpression {
    extends = EventExpression
}

ParenEventExpression ::= '(' EventExpression ')' {
    extends = EventExpression
}


EdgeIdentifier ::= posedge | negedge | edge

// Module Instantiation

ModuleInstantiation ::= ModuleIdentifier [ '#' PortValueAssignment ] IDENTIFIER [ PortValueAssignment ] {
    methods = [
        instanceIdentifier = 'IDENTIFIER'
    ]
    implements = [ "ch.rbarton.intellijsv.core.psi.ext.SvNamedIdentifierOwner" ]
    mixin = "ch.rbarton.intellijsv.core.psi.mixin.SvModuleInstantiationMixin"
}

// Workaround for not having two IDENTIFIER tokens in one rule
ModuleIdentifier ::= IDENTIFIER {
    implements = "ch.rbarton.intellijsv.core.psi.ext.SvReferenceOwner"
    mixin = "ch.rbarton.intellijsv.core.psi.mixin.SvModuleIdentifierMixin"
}

PortValueAssignment ::= '(' [ <<CSV Expr>> | <<CSV NamedPortAssignment>> ] ')' {
    pin = 1
}

NamedPortAssignment ::= '.' IDENTIFIER '(' [ Expr ] ')' {
    pin = 1
    recoverWhile = NamedPortAssignment_recover
}

private NamedPortAssignment_recover ::= !(',' | ')')

GenerateRegion ::= generate GenerateItem endgenerate

GenerateItem ::= TODO

// Types

Type ::=

    ( BuiltinType | IDENTIFIER ) [ Signing ] [ UnpackedDimension ]
    | IntegerAtomType [ Signing ]
    | NonIntegerType
    | EnumDeclaration
    | StructUnionDeclaration
    | string

TypeDeclaration ::= typedef (
      [ enum | struct | union | class ] IDENTIFIER
    | Type IDENTIFIER VariableDimension *
    ) {
    recoverWhile = Semicolon_recover
    methods = [ class_kw = "class" ]
    implements = "ch.rbarton.intellijsv.core.psi.ext.SvNamedIdentifierOwner"
    extends = "ch.rbarton.intellijsv.core.psi.mixin.SvTypeDeclarationMixin"
}

EnumDeclaration ::= enum [ EnumBaseType ] '{' <<CSV EnumMember>> '}' PackedDimension *

EnumBaseType ::=

      IntegerAtomType [ Signing ]
    | IntegerVectorType [ Signing ] [ PackedDimension ]
    | IDENTIFIER [ PackedDimension ]

EnumMember ::= IDENTIFIER [ '[' UnsignedNumberRule [ ':' UnsignedNumberRule ] ] [ '=' ConstExpr ]

StructUnionDeclaration ::= ( struct | union ) [ packed [ Signing ] ] '{' StructUnionMember + '}' PackedDimension *

StructUnionMember ::= AttributeInstance * Type <<CSV IdentifierWithDefault>> ';'

// Dimensions

UnpackedDimension ::= '[' Expr ':' Expr ']' {
    pin = 3
}

private PackedDimension ::= UnpackedDimension

UnsizedDimension ::= '[' ']'

VariableDimension ::=

      UnsizedDimension
    | UnpackedDimension

BitSelect ::= '[' Expr ']'

// Built-in Types and Related Keywords

Signing ::= signed | unsigned

BuiltinType ::= logic | int | wire | reg

IntegerAtomType ::= byte | shortint | int | longint | integer | time

IntegerVectorType ::= bit | logic | reg

NonIntegerType ::= shortreal | real | realtime

private IntegerType ::= IntegerVectorType | IntegerAtomType

SimpleType ::= IntegerType | NonIntegerType | IDENTIFIER

// Expressions

/*
See IEEE 1800-2017 Table 11-2 Operator precedence and associativity
Grouped by equivalent precedence.
Note: order may appear reversed to the table. Low precedence groups are first.
Fake rules are used to structure the PSI tree.
Const expressions are enforced with extra rules provided by the [SvParserUtil].
 */
ConstExpr ::= <<exprMode 'true' Expr>> {
  elementType = Expr
  name = "Expr"
}

Expr ::=

      PredicateAndExpr
    | ConcatExpr
    | AssignBinExpr
    | ArrowBinExpr
    | TernaryExpr  // TODO: broken, second expression is not recognized
    | LogicOrBinExpr
    | LogicAndBinExpr
    | BitOrBinExpr
    | BitXorBinExpr
    | BitAndBinExpr
    | EqCompBinExpr
    | RelCompBinExpr
    | ShiftBinExpr
    | AddBinExpr
    | MulBinExpr
    | PowBinExpr
    | IncUnaryExpr
    | UnaryExpr
    | DotBinExpr
    | CastExpr
    | AtomicExpr

// TODO: compare with SvFull.bnf for consistency
AtomicExpr ::=

      ConcatExpr
    | ParenExpr
    | BraceExpr
    | Literal
    | <<isNonConstExpr>> HierarchicalIdentifier

PredicateAndExpr ::= Expr '&&&' Expr
ConcatExpr       ::= '{' <<CSV Expr>> '}'       // TODO: binary or n-ary expression cannot have prefix, treating as ATOM
AssignBinExpr    ::= Expr AssignBinOp Expr
ArrowBinExpr     ::= Expr ArrowBinOp Expr { rightAssociative = true }
TernaryExpr      ::= Expr '?' Expr ':' Expr { rightAssociative = true }
LogicOrBinExpr   ::= Expr '||' Expr
LogicAndBinExpr  ::= Expr '&&' Expr
BitOrBinExpr     ::= Expr '|' Expr
BitXorBinExpr    ::= Expr BitXorBinOp Expr
BitAndBinExpr    ::= Expr '&' Expr
EqCompBinExpr    ::= Expr EqCompBinOp Expr
RelCompBinExpr   ::= Expr RelCompBinOp Expr
ShiftBinExpr     ::= Expr ShiftBinOp Expr
AddBinExpr       ::= Expr AddBinOp Expr
MulBinExpr       ::= Expr MulBinOp Expr
PowBinExpr       ::= Expr '**' Expr
IncUnaryExpr     ::= IncDecOp NetLvalue | NetLvalue IncDecOp
UnaryExpr        ::= UnaryOp AtomicExpr

ParenExpr        ::= '(' Expr ')'
BraceExpr        ::= '[' Expr ']' // TODO: should have Expr before as well, use fake rule, works with BinExpr
DotBinExpr       ::= Expr '.' Expr
CastExpr         ::= CastingType "'" '(' Expr ')'

CastingType ::= Signing | string | const | AtomicExpr | SimpleType

// Operators
UnaryOp      ::= '+' | '-' | '!' | '~' | '&' | '~&' | '|' | '~|' | '^' | '~^' | '^~' { name = "operator" }
IncDecOp     ::= '++' | '--' { name = "operator" }
MulBinOp     ::= '*' | '/' | '%' { name = "operator"}
AddBinOp     ::= '+' | '-' { name = "operator" }
ShiftBinOp   ::= '>>' | '<<' | '>>>' | '<<<' { name = "operator" }
RelCompBinOp ::= '<'  | '<=' | '>' | '>=' { name = "operator" }
EqCompBinOp  ::= '==' | '!=' | '===' | '!==' | '==?' | '!=?' { name = "operator" }
BitXorBinOp  ::= '^' | '^~' | '~^' { name = "operator" }
ArrowBinOp   ::= '->' | '<->' { name = "operator" }
AssignBinOp  ::= '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^='
                 | '<<=' | '>>=' | '<<<=' | '>>>=' { name = "operator" }


fake BinaryExpr ::= Expr BinaryOperator Expr {
  methods = [
    left="Expr[0]"
    right="Expr[1]"
  ]
}

//noinspection BnfUnusedRule
fake BinaryOperator ::=

      '+'  | '-'  | '*'   | '/'   | '%'
    | '==' | '!=' | '===' | '!==' | '==?' | '!=?'
    | '&&' | '||' | '**'
    | '<'  | '<=' | '>'   | '>='
    | '&'  | '|'  | '^'   | '^~'  | '~^'
    | '>>' | '<<' | '>>>' | '<<<'
    | '->' | '<->'
    | '&&&'
//AssignmentOperator ::=
    |
    "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" |
    "|=" | "^=" | "<<=" | ">>=" | "<<<=" | ">>>="

HierarchicalIdentifier ::= [ "$root" '.' ] ( IdentifierPlaceholder <<beginConstExpr>> BitSelect * <<endConstExpr>> '.' ) * IDENTIFIER

IdentifierPlaceholder ::= IDENTIFIER

// Operators

AssignOperator ::= '=' | '<='

// Literals

Literal ::= TIME_LITERAL | NumberLiteral | SPECIAL_NUMBER | STRING_LITERAL

NumberLiteral ::= BINARY_NUMBER | OCTAL_NUMBER | HEX_NUMBER | UNSIGNED_NUMBER

// Attributes

AttributeInstance ::= '(*' <<CSV IdentifierWithDefault>> '*)' {
    pin = 1
//    recoverWhile = AttributeInstance_recover
}

//noinspection BnfUnusedRule
private AttributeInstance_recover ::= !'*)'
