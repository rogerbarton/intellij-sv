{
    parserClass="com.github.rogerbarton.intellijsv.core.parser.SvParser"
//    parserUtilClass="com.github.rogerbarton.intellijsv.parser.SvParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Sv"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.rogerbarton.intellijsv.core.psi"
    psiImplPackage="com.github.rogerbarton.intellijsv.core.psi.impl"

    elementTypeHolderClass="com.github.rogerbarton.intellijsv.core.psi.SvTypes"
    elementTypeClass="com.github.rogerbarton.intellijsv.core.psi.SvElementType"
    tokenTypeClass="com.github.rogerbarton.intellijsv.core.psi.SvTokenType"

    tokens = [
        LBRACE      =  '{'
        RBRACE      =  '}'
        LBRACK      =  '['
        RBRACK      =  ']'
        LPAREN      =  '('
        RPAREN      =  ')'
        COLON       =  ':'
        COLONCOLON  =  '::'
        SEMICOLON   =  ';'
        COMMA       =  ','
        EQ          =  '='
        EXCLEQ      =  '!='
        EQEQ        =  '=='
        SHA         =  '#'
        EXCL        =  '!'
        PLUSEQ      =  '+='
        PLUS        =  '+'
        MINUSEQ     =  '-='
        MINUS       =  '-'
        OREQ        =  '|='
        ANDAND      =  '&&'
        ANDEQ       =  '&='
        AND         =  '&'
        OR          =  '|'
        LT          =  '<'
        XOREQ       =  '^='
        XOR         =  '^'
        MULEQ       =  '*='
        MUL         =  '*'
        DIVEQ       =  '/='
        DIV         =  '/'
        GT          =  '>'
        DOT         =  '.'
        FAT_ARROW   =  '=>'
        ARROW       =  '->'
        Q           =  '?'
        AT          =  '@'
        UNDERSCORE  =  '_'
        DOLLAR      =  '$'

        WHITE_SPACE     = 'regexp:[\s\r\n]+'
        IDENTIFIER      = 'regexp:[a-zA-Z_][a-zA-Z0-9_$]*'
        LINE_COMMENT    = 'regexp://.*'
        BLOCK_COMMENT   = 'regexp:/\*(.|\n)*\*/'
        UNSIGNED_NUMBER = 'regexp:\d[\d_]*'
        BINARY_VALUE    = 'regexp:[01XxZz?][01_XxZz?]*'
        OCTAL_VALUE     = 'regexp:[0-7XxZz?][0-7_XxZz?]*'
        HEX_VALUE       = 'regexp:[0-7XxZz?][0-7_XxZz?]*'
    ]

    consumeTokenMethod("((?!.*_with_recover).*_recover)") = "consumeTokenFast"
}

// A.1.1 Library source text

// A.1.2 SystemVerilog source text

source_text ::= [ (timeunits_declaration ';' )* ] module_declaration *


module_declaration ::= module_definition | module_extern

module_definition ::=

    module module_ansi_header ';' [ (timeunits_declaration ';')* ]
    // non_port_module_item *
    endmodule [ ':' IDENTIFIER ] {
    pin=1
    recoverWhile = module_definition_recover
    }

private module_definition_recover ::= !(module | extern)

module_extern ::= extern module module_ansi_header ';' {
    pin = 2
}

module_ansi_header ::= IDENTIFIER [ parameter_port_list ] [ list_of_port_declarations ] {
    recoverWhile = statement_recover
}

private statement_recover ::= !';'

timeunits_declaration ::=

      timeunit time_literal [ '/' time_literal ]
    | timeprecision time_literal {
    recoverWhile = statement_recover
}

// A.1.3 Module parameters and ports

parameter_port_list ::=

    '#' '(' 
       [ ( list_of_param_assignments  ( ',' parameter_port_declaration ) * )
       | ( parameter_port_declaration ( ',' parameter_port_declaration ) * ) ] 
       ')'

parameter_port_declaration ::=

      parameter_declaration
    | local_parameter_declaration
//    | data_type list_of_param_assignments
//    | 'type' list_of_type_assignments

list_of_ports ::= '(' port ( ',' port ) * ')'

list_of_port_declarations ::= '(' [ ansi_port_declaration ( ',' ansi_port_declaration )* ] ')'

port_declaration ::=

      inout_declaration
    | input_declaration
    | output_declaration
    | ref_declaration
    | interface_port_declaration

port ::=

      '.' IDENTIFIER '(' [ port_expression ] ')'
    | [ port_expression ]

port_expression ::=

      port_reference
    | '{' port_reference ( ',' port_reference ) * '}'

port_reference ::= IDENTIFIER constant_select

port_direction ::= input | output | inout | ref

net_port_header ::= [ port_direction ] net_port_type

variable_port_header ::= [ port_direction ] variable_port_type

ansi_port_declaration ::=

      [ net_port_header ] IDENTIFIER  unpacked_dimension * [ '=' constant_expression ]
    | [ variable_port_header ] IDENTIFIER variable_dimension * [ '=' constant_expression ]
    | [ port_direction ] '.' IDENTIFIER '(' [ expression ] ')'

// A.1.4 Module items

// A.1.5 Configuration source text

// A.1.6 Interface items

// A.1.7 Program items

// A.1.8 Checker items

// A.1.9 Class items

// A.1.10 Constraints

// A.1.11 Package items

//A.2 Declarations

// A.2.1 Declaration types

// A.2.1.1 Module parameter declarations

local_parameter_declaration ::=

      localparam data_type_or_implicit list_of_param_assignments
    | localparam type list_of_type_assignments

parameter_declaration ::=

      parameter data_type_or_implicit list_of_param_assignments
    | parameter type list_of_type_assignments

// A.2.1.2 Port declarations

inout_declaration ::= inout net_port_type IDENTIFIER

input_declaration ::=

      input net_port_type IDENTIFIER
    | input variable_port_type IDENTIFIER

output_declaration ::=

      output net_port_type IDENTIFIER
    | output variable_port_type IDENTIFIER

interface_port_declaration ::=

      IDENTIFIER
    | IDENTIFIER '.' IDENTIFIER

ref_declaration ::= ref variable_port_type IDENTIFIER


// A.2.2 Declaration data types

// A.2.2.1 Net and variable types

casting_type ::= simple_type | constant_primary | signing | string | const

data_type ::=

      integer_vector_type [ signing ] packed_dimension *
    | integer_atom_type [ signing ]
    | non_integer_type
//    | struct_union [ packed [ signing ] ] '{' struct_union_member { struct_union_member } '}' { packed_dimension }
    | enum [ enum_base_type ] '{' enum_name_declaration ( ',' enum_name_declaration ) * '}' packed_dimension *
    | string
//    | chandle
//    | virtual [ interface ] IDENTIFIER [ parameter_value_assignment ] [ '.' IDENTIFIER ]
//    | [ class_scope | package_scope ] IDENTIFIER packed_dimension *
//    | class_type
//    | event
    | IDENTIFIER
//    | type_reference

data_type_or_implicit ::= data_type | implicit_data_type

implicit_data_type ::= [ signing ] packed_dimension *

enum_base_type ::=

      integer_atom_type [ signing ]
    | integer_vector_type [ signing ] [ packed_dimension ]
    | IDENTIFIER [ packed_dimension ]

enum_name_declaration ::= IDENTIFIER [ '[' integral_number [ ':' integral_number ] ']' ] [ '=' constant_expression ]

class_scope ::= class_type '::'

class_type ::= IDENTIFIER [ parameter_value_assignment ] ( '::' IDENTIFIER [ parameter_value_assignment ] ) *

integer_type ::= integer_vector_type | integer_atom_type

integer_atom_type ::= byte | shortint | int | longint | integer | time

integer_vector_type ::= bit | logic | reg

non_integer_type ::= shortreal | real | realtime


net_port_type ::=

      data_type_or_implicit

variable_port_type ::= var_data_type

var_data_type ::= data_type | var data_type_or_implicit

signing ::= signed | unsigned

simple_type ::= integer_type | non_integer_type | IDENTIFIER

struct_union_member ::=

    data_type_or_void
    list_of_variable_decl_assignments ';'

data_type_or_void ::= data_type | void

struct_union ::= struct | union [ tagged ]

type_reference ::= type '(' expression ')' | type '(' data_type ')'

// A.2.2.2 Strengths

// A.2.2.3 Delays

// A.2.3 Declaration lists

list_of_defparam_assignments ::= defparam_assignment ( ',' defparam_assignment ) *

list_of_net_decl_assignments ::= net_decl_assignment ( ',' net_decl_assignment ) *

list_of_param_assignments ::= param_assignment ( ',' param_assignment ) *

list_of_specparam_assignments ::= specparam_assignment ( ',' specparam_assignment ) *

list_of_type_assignments ::= type_assignment ( ',' type_assignment ) *

list_of_variable_decl_assignments ::= variable_decl_assignment ( ',' variable_decl_assignment ) *

// A.2.4 Declaration assignments

defparam_assignment ::= IDENTIFIER '=' constant_mintypmax_expression

net_decl_assignment ::= IDENTIFIER ( unpacked_dimension ) * [ '=' expression ]

param_assignment ::= IDENTIFIER ( unpacked_dimension ) *  // [ '=' constant_param_expression ]

specparam_assignment ::= IDENTIFIER '=' constant_mintypmax_expression

type_assignment ::= IDENTIFIER [ '=' data_type ]

error_limit_value ::= limit_value

reject_limit_value ::= limit_value

limit_value ::= constant_mintypmax_expression

variable_decl_assignment ::=

      IDENTIFIER ( variable_dimension ) * [ '=' expression ]
    | IDENTIFIER unsized_dimension ( variable_dimension ) * [ '=' dynamic_array_new ]
    | IDENTIFIER [ '=' class_new ]

class_new ::=

    [ class_scope ] new [ '(' list_of_arguments ')' ]
    | new expression

dynamic_array_new ::= new '[' expression ']' [ '(' expression ')' ]

// A.2.5 Declaration ranges

unpacked_dimension ::=

      '[' constant_range ']'
//    | '[' constant_expression ']'

packed_dimension ::=

      '[' constant_range ']'
    | unsized_dimension

associative_dimension ::=

    '[' data_type ']'
    | '[' '*' ']'

variable_dimension ::=

      unsized_dimension
    | unpacked_dimension
    | associative_dimension
    | queue_dimension

queue_dimension ::= '[' '$' [ ':' constant_expression ] ']'

unsized_dimension ::= '[' ']'

// A.2.6 Function declarations

// A.2.7 Task declarations

// A.2.8 Block item declarations

// A.2.9 Interface declarations

// A.2.10 Assertion declarations

//sequence_method_call ::= sequence_instance '.' IDENTIFIER
//
//sequence_instance ::= IDENTIFIER [ '(' [ sequence_list_of_arguments ] ')' ]
//
//sequence_list_of_arguments ::=
//
//      '.' IDENTIFIER '(' [sequence_actual_arg] ')' ( ',' '.' IDENTIFIER '(' [sequence_actual_arg] ')' ) *
//    | [sequence_actual_arg] ( ',' [sequence_actual_arg] ) * ( ',' '.' IDENTIFIER '(' [sequence_actual_arg] ')' ) *
//
//sequence_actual_arg ::= event_expression | sequence_expr

// A.2.11 Covergroup declarations

// A.2.12 Let declarations

// A.3 Primitive instances

//A.4 Instantiations

// A.4.1 Instantiation

// A.4.1.1 Module instantiation
module_instantiation ::=

    IDENTIFIER [ parameter_value_assignment ]
    hierarchical_instance ( ',' hierarchical_instance ) * ';'

parameter_value_assignment ::= '#' '(' [ list_of_parameter_assignments ] ')'

list_of_parameter_assignments ::=

      ordered_parameter_assignment ( ',' ordered_parameter_assignment ) *
    | named_parameter_assignment ( ',' named_parameter_assignment ) *

ordered_parameter_assignment ::= param_expression

named_parameter_assignment ::= '.' IDENTIFIER '(' [ param_expression ] ')'

hierarchical_instance ::= name_of_instance '(' [ list_of_port_connections ] ')'

name_of_instance ::= IDENTIFIER ( unpacked_dimension ) *

list_of_port_connections ::=

      named_port_connection ( ',' named_port_connection ) *
    | ordered_port_connection ( ',' ordered_port_connection ) *

ordered_port_connection ::= [ expression ]

named_port_connection ::=

      '.' IDENTIFIER [ '(' [ expression ] ')' ]
    | '.*'

// A.4.1.2 Interface instantiation

// A.4.1.3 Program instantiation

// A.4.1.4 Checker instantiation

// A.4.2 Generated instantiation

//A.5 UDP declaration and instantiation

//A.6 Behavioral statements

// A.6.1 Continuous assignment and net alias statements

// A.6.2 Procedural blocks and assignments

operator_assignment ::= variable_lvalue assignment_operator expression

assignment_operator ::=

    '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' |
    '|=' | '^=' | '<<=' | '>>=' | '<<<=' | '>>>='

nonblocking_assignment ::= variable_lvalue '<=' expression

// A.6.3 Parallel and sequential blocks

// A.6.4 Statements

IDENTIFIER_list ::= IDENTIFIER ( ',' IDENTIFIER ) *

// A.6.5 Timing control statements

// A.6.6 Conditional statements

// A.6.7 Case statements

// A.6.7.1 Patterns

pattern ::=

      '.' IDENTIFIER
    | '.*'
    | constant_expression
    | tagged IDENTIFIER [ pattern ]
    | "'" '{' pattern ( ',' pattern ) *  '}'
    | "'" '{' IDENTIFIER ':' pattern ( ',' IDENTIFIER ':' pattern ) * '}'

assignment_pattern ::=

      "'" '{' expression ( ',' expression ) * '}'
    | "'" '{' structure_pattern_key ':' expression ( ',' structure_pattern_key ':' expression ) * '}'
    | "'" '{' array_pattern_key ':' expression ( ',' array_pattern_key ':' expression ) * '}'
    | "'" '{' constant_expression '{' expression ( ',' expression ) * '}' '}'

structure_pattern_key ::= IDENTIFIER | assignment_pattern_key

array_pattern_key ::= constant_expression | assignment_pattern_key

assignment_pattern_key ::= simple_type | default

assignment_pattern_expression ::= [ assignment_pattern_expression_type ] assignment_pattern

assignment_pattern_expression_type ::=

      IDENTIFIER
    | integer_atom_type
    | type_reference

constant_assignment_pattern_expression ::= assignment_pattern_expression

assignment_pattern_net_lvalue ::=

    "'" '{' net_lvalue ( ',' net_lvalue ) * '}'

assignment_pattern_variable_lvalue ::=

    "'" '{' variable_lvalue ( ',' variable_lvalue ) * '}'

// A.6.8 Looping statements

// A.6.9 Subroutine call statements

// A.6.10 Assertion statements

// A.6.11 Clocking block

// A.6.12 Randsequence

//A.7 Specify section

// A.7.5 System timing checks

// A.7.5.1 System timing check commands

// A.7.5.2 System timing check command arguments

// A.7.5.3 System timing check event definitions

//A.8 Expressions

// A.8.1 Concatenations

concatenation ::= '{' expression ( ',' expression ) * '}'

constant_concatenation ::= '{' constant_expression ( ',' constant_expression ) * '}'

constant_multiple_concatenation ::= '{' constant_expression constant_concatenation '}'

module_path_concatenation ::= '{' module_path_expression ( ',' module_path_expression ) * '}'

module_path_multiple_concatenation ::= '{' constant_expression module_path_concatenation '}'

multiple_concatenation ::= '{' expression concatenation '}'

streaming_concatenation ::= '{' stream_operator [ slice_size ] stream_concatenation '}'

stream_operator ::= '>>' | '<<'

slice_size ::= simple_type | constant_expression

stream_concatenation ::= '{' stream_expression ( ',' stream_expression ) * '}'

stream_expression ::= expression [ 'with' '[' array_range_expression ']' ]

array_range_expression ::=

      expression
    | expression ':' expression
    | expression '+:' expression
    | expression '-:' expression

empty_unpacked_array_concatenation ::= '{' '}'

// A.8.2 Subroutine calls

constant_function_call ::= function_subroutine_call

tf_call ::= IDENTIFIER [ '(' list_of_arguments ')' ]

system_tf_call ::=

      IDENTIFIER [ '(' list_of_arguments ')' ]
    | IDENTIFIER '(' data_type [ ',' expression ] ')'
//    | IDENTIFIER '(' expression ( ',' [ expression ] ) * [ ',' [ clocking_event ] ] ')'

subroutine_call ::=

      tf_call
    | system_tf_call
    | method_call
    | [ std '::' ] randomize_call

function_subroutine_call ::= subroutine_call

list_of_arguments ::=

      '.' IDENTIFIER '(' [ expression ] ')' ( ',' '.' IDENTIFIER '(' [ expression ] ')' ) *
    | [ expression ] ( ',' [ expression ] ) * ( ',' '.' IDENTIFIER '(' [ expression ] ')' ) *

method_call ::= method_call_root '.' method_call_body

method_call_body ::=

      IDENTIFIER [ '(' list_of_arguments ')' ]
    | built_in_method_call

built_in_method_call ::=

      array_manipulation_call
    | randomize_call

array_manipulation_call ::=

    array_method_name
    [ '(' list_of_arguments ')' ]
    [ with '(' expression ')' ]

randomize_call ::=

    randomize
    [ '(' [ IDENTIFIER_list | null ] ')' ]
//    [ with [ '(' [ IDENTIFIER_list ] ')' ] constraint_block ]

method_call_root ::= primary | implicit_class_handle

array_method_name ::= IDENTIFIER | unique | and | or | xor

// A.8.3 Expressions

inc_or_dec_expression ::=

    inc_or_dec_operator variable_lvalue
    | variable_lvalue inc_or_dec_operator

conditional_expression ::= cond_predicate '?' expression ':' expression

constant_expression ::=

      constant_primary
    | unary_operator constant_primary
    | constant_expression binary_operator constant_expression
    | constant_expression '?' constant_expression ':' constant_expression

constant_mintypmax_expression ::=

      constant_expression
    | constant_expression ':' constant_expression ':' constant_expression

constant_param_expression ::= constant_mintypmax_expression | data_type | '$'

param_expression ::= mintypmax_expression | data_type | '$'

constant_range_expression ::=

      constant_expression
    | constant_part_select_range

constant_part_select_range ::=

      constant_range
    | constant_indexed_range

constant_range ::= constant_expression ':' constant_expression

constant_indexed_range ::=

      constant_expression '+:' constant_expression
    | constant_expression '-:' constant_expression

expression ::=

      primary
    | unary_operator primary
    | inc_or_dec_expression
    | '(' operator_assignment ')'
    | expression binary_operator expression
    | conditional_expression
    | inside_expression
    | tagged_union_expression

tagged_union_expression ::= tagged IDENTIFIER [ expression ]

inside_expression ::= expression inside '{' open_range_list '}'

value_range ::=

      expression
    | '[' expression ':' expression ']'

mintypmax_expression ::=

      expression
    | expression ':' expression ':' expression

module_path_conditional_expression ::=

    module_path_expression '?' module_path_expression ':' module_path_expression

module_path_expression ::=

      module_path_primary
    | unary_module_path_operator module_path_primary
    | module_path_expression binary_module_path_operator module_path_expression
    | module_path_conditional_expression

module_path_mintypmax_expression ::=

      module_path_expression
    | module_path_expression ':' module_path_expression ':' module_path_expression

part_select_range ::= constant_range | indexed_range

indexed_range ::=

      expression '+:' constant_expression
    | expression '-:' constant_expression

genvar_expression ::= constant_expression

// A.8.4 Primaries

constant_primary ::=

      primary_literal
    | IDENTIFIER constant_select
    | IDENTIFIER [ '[' constant_range_expression ']' ]
    | [ class_scope ] IDENTIFIER
    | constant_concatenation [ '[' constant_range_expression ']' ]
    | constant_multiple_concatenation [ '[' constant_range_expression ']' ]
    | constant_function_call
    | constant_let_expression
    | '(' constant_mintypmax_expression ')'
    | constant_cast
    | constant_assignment_pattern_expression
    | type_reference
    | null

module_path_primary ::=

      number
    | IDENTIFIER
    | module_path_concatenation
    | module_path_multiple_concatenation
    | function_subroutine_call
    | '(' module_path_mintypmax_expression ')'

primary ::=

      primary_literal
    | IDENTIFIER select
    | empty_unpacked_array_concatenation
    | concatenation [ '[' range_expression ']' ]
    | multiple_concatenation [ '[' range_expression ']' ]
    | function_subroutine_call
    | '(' mintypmax_expression ')'
    | cast
    | assignment_pattern_expression
    | streaming_concatenation
//    | sequence_method_call
    | this
    | "~$~"
    | null

class_qualifier ::= [ local '::' ] [ implicit_class_handle '.' | class_scope ]

range_expression ::=

      expression
    | part_select_range

primary_literal ::=

      number
    | time_literal
    | unbased_unsized_literal
    | STRING

time_literal ::=

      UNSIGNED_NUMBER time_unit
    | fixed_point_number time_unit

time_unit ::= s | ms | us | ns | ps | fs

implicit_class_handle ::= this | super | this '.' super

bit_select ::= ( '[' expression ']' ) *

select ::=

    [ ( '.' IDENTIFIER bit_select ) * '.' IDENTIFIER ]
    bit_select [ '[' part_select_range ']' ]

nonrange_select ::=

    [ ( '.' IDENTIFIER bit_select ) * '.' IDENTIFIER ] bit_select

constant_bit_select ::= ( '[' constant_expression ']' ) *

constant_select ::=

    [ ( '.' IDENTIFIER constant_bit_select ) * '.'
    IDENTIFIER ] constant_bit_select
    [ '[' constant_part_select_range ']' ]

constant_cast ::= casting_type "'" '(' constant_expression ')'

constant_let_expression ::= let_expression

cast ::= casting_type "'" '(' expression ')'

// A.8.5 Expression left-side values

net_lvalue ::=

      IDENTIFIER constant_select
    | '{' net_lvalue ( ',' net_lvalue ) * '}'
    | [ assignment_pattern_expression_type ] assignment_pattern_net_lvalue

variable_lvalue ::=

    [ implicit_class_handle '.' ] IDENTIFIER select
    | '{' variable_lvalue ( ',' variable_lvalue ) * '}'
    | [ assignment_pattern_expression_type ] assignment_pattern_variable_lvalue
    | streaming_concatenation

nonrange_variable_lvalue ::=

    [ implicit_class_handle '.' ] IDENTIFIER nonrange_select

// A.8.6 Operators

unary_operator ::=

    '+' | '-' | '!' | '~' | '&' | '~&' | '|' |
    '~|' | '^' | '~^' | '^~'

binary_operator ::=

    '+' | '-' | '/' | '%' | '==' | '!=' |
    '===' | '!==' | '==?' | '!=?' | '&&' | '||' |
    "\""
    | '<' | '<=' | '>' | '>=' | '&' | '|' | '^'
    | '^~' | '~^' | '>>' | '<<' | '>>>' | '<<<'
    | '->' | '<->'

inc_or_dec_operator ::= '++' | '--'

unary_module_path_operator ::=

    '!' | '~' | '&' | '~&' | '|' | '~|' | '^' |
    '~^' | '^~'

binary_module_path_operator ::=

    '==' | '!=' | '&&' | '||' | '&' | '|' | '^' |
    '^~' | '~^'

// A.8.7 Numbers

number ::= integral_number | real_number

integral_number ::=

      decimal_number
    | octal_number
    | binary_number
    | hex_number

decimal_number ::=

      [ size ] decimal_base UNSIGNED_NUMBER
    | [ size ] decimal_base (x_digit '_') *
    | [ size ] decimal_base (z_digit '_') *
    | UNSIGNED_NUMBER

binary_number ::= [ size ] binary_base BINARY_VALUE
octal_number ::= [ size ] octal_base OCTAL_VALUE
hex_number ::= [ size ] hex_base HEX_VALUE
sign ::= '+' | '-'
size ::= non_zero_UNSIGNED_NUMBER
non_zero_UNSIGNED_NUMBER ::= non_zero_decimal_digit ( '_' | decimal_digit) *

real_number ::= fixed_point_number | UNSIGNED_NUMBER [ '.' UNSIGNED_NUMBER ] exp [ sign ] UNSIGNED_NUMBER
fixed_point_number ::= UNSIGNED_NUMBER '.' UNSIGNED_NUMBER
exp ::= 'e' | 'E'

//UNSIGNED_NUMBER ::= decimal_digit ( '_' | decimal_digit ) *
//BINARY_VALUE ::= binary_digit ( '_' | binary_digit ) *
//OCTAL_VALUE ::= octal_digit ( '_' | octal_digit ) *
//HEX_VALUE ::= hex_digit ( '_' | hex_digit ) *
decimal_base ::= "'"["s"|"S"]"d" | "'"["s"|"S"]"D"
binary_base ::= "'"["s"|"S"]"b" | "'"["s"|"S"]"B"
octal_base ::= "'"["s"|"S"]"o" | "'"["s"|"S"]"O"
hex_base ::= "'"["s"|"S"]"h" | "'"["s"|"S"]"H"
non_zero_decimal_digit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
decimal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
x_digit ::= "x" | "X"
z_digit ::= "z" | "Z" | "?"
unbased_unsized_literal ::= "'0" | "'1" | "'" (x_digit | z_digit)

// A.9 General

// A.9.2 Comments

comment ::= LINE_COMMENT | BLOCK_COMMENT
//LINE_COMMENT ::= "//" comment_text n
//BLOCK_COMMENT ::= "/"* comment_text "*/"
//comment_text ::= string

