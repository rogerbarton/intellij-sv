{
    parserClass="com.github.rogerbarton.intellijsv.parser.SvParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Sv"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.rogerbarton.intellijsv.psi"
    psiImplPackage="com.github.rogerbarton.intellijsv.psi.impl"

    elementTypeHolderClass="com.github.rogerbarton.intellijsv.psi.SvTypes"
    elementTypeClass="com.github.rogerbarton.intellijsv.psi.SvElementType"
    tokenTypeClass="com.github.rogerbarton.intellijsv.psi.SvTokenType"

    tokens = [
        space = 'regexp:\s+'
        simple_identifier = "regexp:[a-zA-Z_][a-zA-Z0-9_$]*"
        line_comment="regexp://.*"
        block_comment="regexp:/\*(.|\n)*\*/"
        unsigned_number='regexp:\d[\d_]*'
        binary_value='regexp:[01XxZz?][01_XxZz?]*'
        octal_value='regexp:[0-7XxZz?][0-7_XxZz?]*'
        hex_value='regexp:[0-7XxZz?][0-7_XxZz?]*'
    ]
}

// A.1.1 Library source text

// A.1.2 SystemVerilog source text

source_text ::= [ timeunits_declaration ] description *

description ::=

      module_declaration

module_ansi_header ::=

     attribute_instance * module_keyword space [ lifetime space ]  module_identifier package_import_declaration *
    [ parameter_port_list ] [ list_of_port_declarations ] ";"
    
module_declaration ::= 

    module_ansi_header [ timeunits_declaration ] /*{ non_port_module_item }*/
      "endmodule" [ ":" module_identifier ]
    | "extern" space module_ansi_header
    
module_keyword ::= "module" | "macromodule"

timeunits_declaration ::=

      "timeunit" space time_literal [ "/" time_literal ] ";"
    | "timeprecision" space time_literal ";"
    | "timeunit" space time_literal ";" "timeprecision" space time_literal ";"
    | "timeprecision" space time_literal ";" "timeunit" space time_literal ";"

// A.1.3 Module parameters and ports 

parameter_port_list ::=
   
//      "# (" list_of_param_assignments  { "," parameter_port_declaration } ")"
//    | "# (" parameter_port_declaration { "," parameter_port_declaration } ")"
    "#" "(" ")"

parameter_port_declaration ::=

      parameter_declaration
    | local_parameter_declaration
    | data_type list_of_param_assignments
    | "type" list_of_type_assignments

list_of_ports ::= "(" port { "," port } ")"

list_of_port_declarations ::=

    "(" [ { attribute_instance} ansi_port_declaration
    { "," { attribute_instance} ansi_port_declaration } ] ")"

port_declaration ::=
   
      { attribute_instance } inout_declaration
    | { attribute_instance } input_declaration
    | { attribute_instance } output_declaration
    | { attribute_instance } ref_declaration
    | { attribute_instance } interface_port_declaration

port ::=

      "." port_identifier "(" [ port_expression ] ")"
    | [ port_expression ]

port_expression ::=

      port_reference
    | "{" port_reference { "," port_reference } "}"

port_reference ::= port_identifier constant_select

port_direction ::= "input" | "output" | "inout" | "ref"

net_port_header ::= [ port_direction ] net_port_type

variable_port_header ::= [ port_direction ] variable_port_type

ansi_port_declaration ::=

      [ net_port_header ] port_identifier { unpacked_dimension } /*[ "=" constant_expression ]*/
    | [ variable_port_header ] port_identifier { variable_dimension } /*[ "=" constant_expression ]*/
    | [ port_direction ] "." port_identifier "(" /*[ expression ]*/ ")"

// A.1.4 Module items

// A.1.5 Configuration source text

// A.1.6 Interface items 

// A.1.7 Program items

// A.1.8 Checker items 

// A.1.9 Class items

// A.1.10 Constraints

// A.1.11 Package items

//A.2 Declarations

// A.2.1 Declaration types

// A.2.1.1 Module parameter declarations

local_parameter_declaration ::=

      "localparam" data_type_or_implicit list_of_param_assignments
    | "localparam" "type" list_of_type_assignments

parameter_declaration ::=

      "parameter" data_type_or_implicit list_of_param_assignments
    | "parameter" "type" list_of_type_assignments

// A.2.1.2 Port declarations

inout_declaration ::= "inout" net_port_type list_of_port_identifiers

input_declaration ::=

      "input" net_port_type list_of_port_identifiers
    | "input" variable_port_type list_of_variable_identifiers

output_declaration ::=

      "output" net_port_type list_of_port_identifiers
    | "output" variable_port_type list_of_variable_port_identifiers

interface_port_declaration ::=

      interface_identifier list_of_interface_identifiers
    | interface_identifier "." modport_identifier list_of_interface_identifiers

ref_declaration ::= "ref" variable_port_type list_of_variable_identifiers

//A.2.1.3 Type declarations


package_import_declaration ::= "import" package_import_item { "," package_import_item } ";"

package_import_item ::= package_identifier "::" identifier | package_identifier ":: "*

lifetime ::= "static" | "automatic"

// A.2.2 Declaration data types 

// A.2.2.1 Net and variable types

casting_type ::= simple_type | constant_primary | signing | "string" | "const"

data_type ::=

      integer_vector_type [ signing ] { packed_dimension }
    | integer_atom_type [ signing ]
    | non_integer_type
    | struct_union [ "packed" [ signing ] ] "{" struct_union_member { struct_union_member } "}" { packed_dimension }
    | "enum" [ enum_base_type ] "{" enum_name_declaration { "," enum_name_declaration } "}" { packed_dimension }
    | "string"
    | "chandle"
    | "virtual" [ "interface" ] interface_identifier [ parameter_value_assignment ] [ "." modport_identifier ]
    | [ class_scope | package_scope ] type_identifier { packed_dimension }
    | class_type
    | "event"
    | ps_covergroup_identifier
    | type_reference

data_type_or_implicit ::= data_type | implicit_data_type

implicit_data_type ::= [ signing ] { packed_dimension }

enum_base_type ::=

      integer_atom_type [ signing ]
    | integer_vector_type [ signing ] [ packed_dimension ]
    | type_identifier [ packed_dimension ]

enum_name_declaration ::= enum_identifier [ "[" integral_number [ ":" integral_number ] "]" ] [ "=" constant_expression ]

class_scope ::= class_type "::"

class_type ::= ps_class_identifier [ parameter_value_assignment ] { "::" class_identifier [ parameter_value_assignment ] }

integer_type ::= integer_vector_type | integer_atom_type

integer_atom_type ::= "byte" | "shortint" | "int" | "longint" | "integer" | "time"

integer_vector_type ::= "bit" | "logic" | "reg"
   
non_integer_type ::= "shortreal" | "real" | "realtime"

net_type ::=

    "supply0" | "supply1" | "tri" | "triand" |
    "trior" | "trireg"| "tri0" | "tri1" | "uwire"| "wire"
    | "wand" | "wor"

net_port_type ::=
   
    [ net_type ] data_type_or_implicit
    | net_type_identifier
    | "interconnect" implicit_data_type

variable_port_type ::= var_data_type

var_data_type ::= data_type | "var" data_type_or_implicit

signing ::= "signed" | "unsigned"

simple_type ::= integer_type | non_integer_type | ps_type_identifier | ps_parameter_identifier
   
struct_union_member ::=

    { attribute_instance } [random_qualifier] data_type_or_void
    list_of_variable_decl_assignments ";"

data_type_or_void ::= data_type | "void"

struct_union ::= "struct" | "union" [ "tagged" ]

type_reference ::= "type" "(" expression ")" | "type" "(" data_type ")"
   
// A.2.2.2 Strengths

// A.2.2.3 Delays

// A.2.3 Declaration lists 

list_of_defparam_assignments ::= defparam_assignment { "," defparam_assignment }

list_of_genvar_identifiers ::= genvar_identifier { "," genvar_identifier }

list_of_interface_identifiers ::= interface_identifier { unpacked_dimension }{ "," interface_identifier { unpacked_dimension } }

list_of_net_decl_assignments ::= net_decl_assignment { "," net_decl_assignment }

list_of_param_assignments ::= param_assignment { "," param_assignment }

list_of_port_identifiers ::= port_identifier { unpacked_dimension }{ "," port_identifier { unpacked_dimension } }

list_of_udp_port_identifiers ::= port_identifier { "," port_identifier }

list_of_specparam_assignments ::= specparam_assignment { "," specparam_assignment }

list_of_tf_variable_identifiers ::= port_identifier { variable_dimension } [ "=" expression ]{ "," port_identifier { variable_dimension } [ "=" expression ] }

list_of_type_assignments ::= type_assignment { "," type_assignment }

list_of_variable_decl_assignments ::= variable_decl_assignment { "," variable_decl_assignment }

list_of_variable_identifiers ::= variable_identifier { variable_dimension }{ "," variable_identifier { variable_dimension } }

list_of_variable_port_identifiers ::=

    port_identifier { variable_dimension } [ "=" constant_expression ]
    { "," port_identifier { variable_dimension } [ "=" constant_expression ] }

// A.2.4 Declaration assignments 

defparam_assignment ::= hierarchical_parameter_identifier "=" constant_mintypmax_expression

net_decl_assignment ::= net_identifier { unpacked_dimension } [ "=" expression ]

param_assignment ::= parameter_identifier { unpacked_dimension } [ "=" constant_param_expression ]

specparam_assignment ::= specparam_identifier "=" constant_mintypmax_expression     | pulse_control_specparam

type_assignment ::= type_identifier [ "=" data_type ]

pulse_control_specparam ::=
   
      "PATHPULSE$" "= (" reject_limit_value [ "," error_limit_value ] ")"
    | "PATHPULSE$"specify_input_terminal_descriptor"$"specify_output_terminal_descriptor "= (" reject_limit_value [ "," error_limit_value ] ")"

error_limit_value ::= limit_value

reject_limit_value ::= limit_value

limit_value ::= constant_mintypmax_expression

variable_decl_assignment ::=

      variable_identifier { variable_dimension } [ "=" expression ]
    | dynamic_array_variable_identifier unsized_dimension { variable_dimension } [ "=" dynamic_array_new ]
    | class_variable_identifier [ "=" class_new ]

class_new ::=

    [ class_scope ] "new" [ "(" list_of_arguments ")" ]
    | "new" expression

dynamic_array_new ::= "new" "[" expression "]" [ "(" expression ")" ]

// A.2.5 Declaration ranges 

unpacked_dimension ::=
   
      "[" constant_range "]"
    | "[" constant_expression "]"

packed_dimension ::=
   
      "[" constant_range "]"
    | unsized_dimension

associative_dimension ::=

    "[" data_type "]"
    | "[" "*" "]"

variable_dimension ::=

      unsized_dimension
    | unpacked_dimension
    | associative_dimension
    | queue_dimension

queue_dimension ::= "[" "$" [ ":" constant_expression ] "]"

unsized_dimension ::= "[" "]"

// A.2.6 Function declarations

// A.2.7 Task declarations

// A.2.8 Block item declarations 

// A.2.9 Interface declarations

// A.2.10 Assertion declarations 

sequence_method_call ::= sequence_instance "." method_identifier

sequence_instance ::= ps_or_hierarchical_sequence_identifier [ "(" [ sequence_list_of_arguments ] ")" ]

sequence_list_of_arguments ::=
   
    [sequence_actual_arg] { "," [sequence_actual_arg] } { "," "." identifier "(" [sequence_actual_arg] ")" }
    | "." identifier "(" [sequence_actual_arg] ")" { ", ."
    identifier "(" [sequence_actual_arg] ")" }

sequence_actual_arg ::= event_expression | sequence_expr

// A.2.11 Covergroup declarations

// A.2.12 Let declarations

// A.3 Primitive instances

//A.4 Instantiations 

// A.4.1 Instantiation 

// A.4.1.1 Module instantiation
module_instantiation ::=

    module_identifier [ parameter_value_assignment ]
    hierarchical_instance { "," hierarchical_instance } ";"

parameter_value_assignment ::= "# (" [ list_of_parameter_assignments ] ")"

list_of_parameter_assignments ::=

      ordered_parameter_assignment { "," ordered_parameter_assignment }
    | named_parameter_assignment { "," named_parameter_assignment }

ordered_parameter_assignment ::= param_expression

named_parameter_assignment ::= "." parameter_identifier "(" [ param_expression ] ")"

hierarchical_instance ::= name_of_instance "(" [ list_of_port_connections ] ")"

name_of_instance ::= instance_identifier { unpacked_dimension }

list_of_port_connections ::=

      ordered_port_connection { "," ordered_port_connection }
    | named_port_connection { "," named_port_connection }

ordered_port_connection ::= { attribute_instance } [ expression ]

named_port_connection ::=

      { attribute_instance } "." port_identifier [ "(" [ expression ] ")" ]
    | { attribute_instance } ".*"
   
// A.4.1.2 Interface instantiation
   
// A.4.1.3 Program instantiation
   
// A.4.1.4 Checker instantiation

// A.4.2 Generated instantiation

//A.5 UDP declaration and instantiation

//A.6 Behavioral statements 

// A.6.1 Continuous assignment and net alias statements

// A.6.2 Procedural blocks and assignments

operator_assignment ::= variable_lvalue assignment_operator expression

assignment_operator ::=

    "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" |
    "|=" | "^=" | "<<=" | ">>=" | "<<<=" | ">>>="

nonblocking_assignment ::= variable_lvalue "<=" [ delay_or_event_control ] expression

// A.6.3 Parallel and sequential blocks

// A.6.4 Statements

variable_identifier_list ::= variable_identifier { "," variable_identifier }

// A.6.5 Timing control statements

// A.6.6 Conditional statements

// A.6.7 Case statements

// A.6.7.1 Patterns

pattern ::=

    "." variable_identifier
    | "."*
    | constant_expression
    | "tagged" member_identifier [ pattern ]
    | "'{" pattern { "," pattern } "}"
    | "'{" member_identifier ":" pattern { "," member_identifier ":" pattern } "}"

assignment_pattern ::=

    "'{" expression { "," expression } "}"
    | "'{" structure_pattern_key ":" expression { "," structure_pattern_key ":" expression } "}"
    | "'{" array_pattern_key ":" expression { "," array_pattern_key ":" expression } "}"
    | "'{" constant_expression "{" expression { "," expression } "}" "}"

structure_pattern_key ::= member_identifier | assignment_pattern_key

array_pattern_key ::= constant_expression | assignment_pattern_key

assignment_pattern_key ::= simple_type | "default"

assignment_pattern_expression ::= [ assignment_pattern_expression_type ] assignment_pattern

assignment_pattern_expression_type ::=

      ps_type_identifier
    | ps_parameter_identifier
    | integer_atom_type
    | type_reference

constant_assignment_pattern_expression ::= assignment_pattern_expression

assignment_pattern_net_lvalue ::=

    "'{" net_lvalue {"," net_lvalue } "}"

assignment_pattern_variable_lvalue ::=

    "'{" variable_lvalue {"," variable_lvalue } "}"

// A.6.8 Looping statements 

// A.6.9 Subroutine call statements 

// A.6.10 Assertion statements

// A.6.11 Clocking block

// A.6.12 Randsequence 

//A.7 Specify section

// A.7.5 System timing checks 

// A.7.5.1 System timing check commands
   
// A.7.5.2 System timing check command arguments

// A.7.5.3 System timing check event definitions

//A.8 Expressions

// A.8.1 Concatenations 

concatenation ::= "{" expression { "," expression } "}"

constant_concatenation ::= "{" constant_expression { "," constant_expression } "}"

constant_multiple_concatenation ::= "{" constant_expression constant_concatenation "}"

module_path_concatenation ::= "{" module_path_expression { "," module_path_expression } "}"

module_path_multiple_concatenation ::= "{" constant_expression module_path_concatenation "}"

multiple_concatenation ::= "{" expression concatenation "}"

streaming_concatenation ::= "{" stream_operator [ slice_size ] stream_concatenation "}"

stream_operator ::= ">>" | "<<"

slice_size ::= simple_type | constant_expression

stream_concatenation ::= "{" stream_expression { "," stream_expression } "}"

stream_expression ::= expression [ "with" "[" array_range_expression "]" ]

array_range_expression ::=

      expression
    | expression ":" expression
    | expression "+:" expression
    | expression "-:" expression

empty_unpacked_array_concatenation ::= "{ }"

// A.8.2 Subroutine calls 

constant_function_call ::= function_subroutine_call

tf_call ::= ps_or_hierarchical_tf_identifier { attribute_instance } [ "(" list_of_arguments ")" ]

system_tf_call ::=

      system_tf_identifier [ "(" list_of_arguments ")" ]
    | system_tf_identifier "(" data_type [ "," expression ] ")"
    | system_tf_identifier "(" expression { "," [ expression ] } [ "," [ clocking_event ] ] ")"

subroutine_call ::=

      tf_call
    | system_tf_call
    | method_call
    | [ "std ::" ] randomize_call

function_subroutine_call ::= subroutine_call

list_of_arguments ::=

      [ expression ] { "," [ expression ] } { "," "." identifier "(" [ expression ] ")" }
    | "." identifier "(" [ expression ] ")" { "," "." identifier "(" [ expression ] ")" }

method_call ::= method_call_root "." method_call_body

method_call_body ::=

      method_identifier { attribute_instance } [ "(" list_of_arguments ")" ]
    | built_in_method_call

built_in_method_call ::=

      array_manipulation_call
    | randomize_call

array_manipulation_call ::=

    array_method_name { attribute_instance }
    [ "(" list_of_arguments ")" ]
    [ "with" "(" expression ")" ]

randomize_call ::=

    "randomize" { attribute_instance }
    [ "(" [ variable_identifier_list | "null" ] ")" ]
    [ "with" [ "(" [ identifier_list ] ")" ] constraint_block ]

method_call_root ::= primary | implicit_class_handle

array_method_name ::= method_identifier | "unique" | "and" | "or" | "xor"

// A.8.3 Expressions 

inc_or_dec_expression ::=

    inc_or_dec_operator { attribute_instance } variable_lvalue
    | variable_lvalue { attribute_instance } inc_or_dec_operator

conditional_expression ::= cond_predicate "?" { attribute_instance } expression ":" expression

constant_expression ::=

      constant_primary
    | unary_operator { attribute_instance } constant_primary
    | constant_expression binary_operator { attribute_instance } constant_expression
    | constant_expression "?" { attribute_instance } constant_expression ":" constant_expression

constant_mintypmax_expression ::=

      constant_expression
    | constant_expression ":" constant_expression ":" constant_expression

constant_param_expression ::= constant_mintypmax_expression | data_type | "$"

param_expression ::= mintypmax_expression | data_type | "$"

constant_range_expression ::=

      constant_expression
    | constant_part_select_range

constant_part_select_range ::=

      constant_range
    | constant_indexed_range

constant_range ::= constant_expression ":" constant_expression

constant_indexed_range ::=

      constant_expression "+:" constant_expression
    | constant_expression "-:" constant_expression

expression ::=

      primary
    | unary_operator { attribute_instance } primary
    | inc_or_dec_expression
    | "(" operator_assignment ")"
    | expression binary_operator { attribute_instance } expression
    | conditional_expression
    | inside_expression
    | tagged_union_expression

tagged_union_expression ::= "tagged" member_identifier [ expression ]

inside_expression ::= expression "inside" "{" open_range_list "}"

value_range ::=

      expression
    | "[" expression ":" expression "]"

mintypmax_expression ::=

      expression
    | expression ":" expression ":" expression

module_path_conditional_expression ::=

    module_path_expression "?" { attribute_instance } module_path_expression ":" module_path_expression

module_path_expression ::=

      module_path_primary
    | unary_module_path_operator { attribute_instance } module_path_primary
    | module_path_expression binary_module_path_operator { attribute_instance } module_path_expression
    | module_path_conditional_expression

module_path_mintypmax_expression ::=

      module_path_expression
    | module_path_expression ":" module_path_expression ":" module_path_expression

part_select_range ::= constant_range | indexed_range

indexed_range ::=

      expression "+:" constant_expression
    | expression "-:" constant_expression

genvar_expression ::= constant_expression

// A.8.4 Primaries 

constant_primary ::=

      primary_literal
    | ps_parameter_identifier constant_select
    | specparam_identifier [ "[" constant_range_expression "]" ]
    | genvar_identifier
    | formal_port_identifier constant_select
    | [ package_scope | class_scope ] enum_identifier
    | constant_concatenation [ "[" constant_range_expression "]" ]
    | constant_multiple_concatenation [ "[" constant_range_expression "]" ]
    | constant_function_call
    | constant_let_expression
    | "(" constant_mintypmax_expression ")"
    | constant_cast
    | constant_assignment_pattern_expression
    | type_reference
    | "null"

module_path_primary ::=

      number
    | identifier
    | module_path_concatenation
    | module_path_multiple_concatenation
    | function_subroutine_call
    | "(" module_path_mintypmax_expression ")"

primary ::=

      primary_literal
    | [ package_scope ] hierarchical_identifier select
    | empty_unpacked_array_concatenation
    | concatenation [ "[" range_expression "]" ]
    | multiple_concatenation [ "[" range_expression "]" ]
    | function_subroutine_call
    | "(" mintypmax_expression ")"
    | cast
    | assignment_pattern_expression
    | streaming_concatenation | sequence_method_call
    | "this"
    | "~$~"
    | "null"

class_qualifier ::= [ "local" "::" ] [ implicit_class_handle "." | class_scope ]

range_expression ::=

      expression
    | part_select_range

primary_literal ::=

      number
    | time_literal
    | unbased_unsized_literal
    | string_literal

time_literal ::=

      unsigned_number time_unit
    | fixed_point_number time_unit

time_unit ::= "s" | "ms" | "us" | "ns" | "ps" | "fs"

implicit_class_handle ::= "this" | "super" | "this . super"

bit_select ::= { "[" expression "]" }

select ::=

    [ { "." member_identifier bit_select } "." member_identifier ]
    bit_select [ "[" part_select_range "]" ]

nonrange_select ::=

    [ { "." member_identifier bit_select } "." member_identifier ] bit_select

constant_bit_select ::= { "[" constant_expression "]" }

constant_select ::=

    [ { "." member_identifier constant_bit_select } "."
    member_identifier ] constant_bit_select
    [ "[" constant_part_select_range "]" ]

constant_cast ::= casting_type "' (" constant_expression ")"

constant_let_expression ::= let_expression

cast ::= casting_type "' (" expression ")"

// A.8.5 Expression left-side values 

net_lvalue ::=

      ps_or_hierarchical_net_identifier constant_select
    | "{" net_lvalue { "," net_lvalue } "}"
    | [ assignment_pattern_expression_type ] assignment_pattern_net_lvalue

variable_lvalue ::=

    [ implicit_class_handle "." | package_scope ] hierarchical_variable_identifier select
    | "{" variable_lvalue { "," variable_lvalue } "}"
    | [ assignment_pattern_expression_type ] assignment_pattern_variable_lvalue
    | streaming_concatenation

nonrange_variable_lvalue ::=

    [ implicit_class_handle "." | package_scope ] hierarchical_variable_identifier nonrange_select

// A.8.6 Operators 

unary_operator ::=

    "+" | "-" | "!" | "~" | "&" | "~&" | "|" |
    "~|" | "^" | "~^" | "^~"

binary_operator ::=

    "+" | "-" | ""* | "/" | "%" | "==" | "!=" |
    "===" | "!==" | "==?" | "!=?" | "&&" | "||" |
    "\""
    | "<" | "<=" | ">" | ">=" | "&" | "|" | "^"
    | "^~" | "~^" | ">>" | "<<" | ">>>" | "<<<"
    | "->" | "<->"

inc_or_dec_operator ::= "++" | "--"

unary_module_path_operator ::=

    "!" | "~" | "&" | "~&" | "|" | "~|" | "^" |
    "~^" | "^~"

binary_module_path_operator ::=
   
    "==" | "!=" | "&&" | "||" | "&" | "|" | "^" |
    "^~" | "~^"

// A.8.7 Numbers 

number ::= integral_number | real_number

integral_number ::=

      decimal_number
    | octal_number
    | binary_number
    | hex_number

decimal_number ::=

      unsigned_number
    | [ size ] decimal_base unsigned_number
    | [ size ] decimal_base x_digit { "_" }
    | [ size ] decimal_base z_digit { "_" }

binary_number ::= [ size ] binary_base binary_value
octal_number ::= [ size ] octal_base octal_value
hex_number ::= [ size ] hex_base hex_value
sign ::= "+" | "-"
size ::= non_zero_unsigned_number
non_zero_unsigned_number ::= non_zero_decimal_digit { "_" | decimal_digit}

real_number ::= fixed_point_number | unsigned_number [ "." unsigned_number ] exp [ sign ] unsigned_number
fixed_point_number ::= unsigned_number "." unsigned_number
exp ::= "e" | "E"

//unsigned_number ::= decimal_digit ( '_' | decimal_digit ) *
//binary_value ::= binary_digit ( "_" | binary_digit ) *
//octal_value ::= octal_digit ( "_" | octal_digit ) *
//hex_value ::= hex_digit ( "_" | hex_digit ) *
decimal_base ::= "'"["s"|"S"]"d" | "'"["s"|"S"]"D"
binary_base ::= "'"["s"|"S"]"b" | "'"["s"|"S"]"B"
octal_base ::= "'"["s"|"S"]"o" | "'"["s"|"S"]"O"
hex_base ::= "'"["s"|"S"]"h" | "'"["s"|"S"]"H"
non_zero_decimal_digit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
decimal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
binary_digit ::= x_digit | z_digit | "0" | "1"
octal_digit ::= x_digit | z_digit | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
hex_digit ::= x_digit | z_digit | "0" | "1" | "2" | "3"
    | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b"
    | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D"
    | "E" | "F"
x_digit ::= "x" | "X"
z_digit ::= "z" | "Z" | "?"
unbased_unsized_literal ::= "'0" | "'1" | "'" z_or_x

// A.8.8 Strings 

string_literal ::= """ { Any_ASCII_Characters } """ //TODO

// A.9 General 

// A.9.1 Attributes 

attribute_instance ::= "(*" attr_spec ( "," attr_spec ) * "*)"
attr_spec ::= attr_name [ "=" constant_expression ]
attr_name ::= identifier

// A.9.2 Comments 

comment ::= line_comment | block_comment
//line_comment ::= "//" comment_text n
//block_comment ::= "/"* comment_text "*/"
//comment_text ::= { Any_ASCII_character }

// A.9.3 Identifiers 

array_identifier ::= identifier
block_identifier ::= identifier
bin_identifier ::= identifier
c_identifier ::= [ "a"-"zA"-"Z_" ] { [ "a"-"zA"-"Z0"-"9_" ] }
cell_identifier ::= identifier
checker_identifier ::= identifier
class_identifier ::= identifier
class_variable_identifier ::= variable_identifier
clocking_identifier ::= identifier
config_identifier ::= identifier
const_identifier ::= identifier
constraint_identifier ::= identifier
covergroup_identifier ::= identifier
covergroup_variable_identifier ::= variable_identifier
cover_point_identifier ::= identifier
cross_identifier ::= identifier
dynamic_array_variable_identifier ::= variable_identifier
enum_identifier ::= identifier
escaped_identifier ::= '\' {any_printable_ASCII_character_except_white_space} white_space
formal_identifier ::= identifier
formal_port_identifier ::= identifier
function_identifier ::= identifier
generate_block_identifier ::= identifier
genvar_identifier ::= identifier
hierarchical_array_identifier ::= hierarchical_identifier

hierarchical_block_identifier ::= hierarchical_identifier
hierarchical_event_identifier ::= hierarchical_identifier
hierarchical_identifier ::= [ "$root" "." ] { identifier constant_bit_select "." } identifier
hierarchical_net_identifier ::= hierarchical_identifier
hierarchical_parameter_identifier ::= hierarchical_identifier
hierarchical_property_identifier ::= hierarchical_identifier
hierarchical_sequence_identifier ::= hierarchical_identifier
hierarchical_task_identifier ::= hierarchical_identifier
hierarchical_tf_identifier ::= hierarchical_identifier
hierarchical_variable_identifier ::= hierarchical_identifier
identifier ::= simple_identifier
index_variable_identifier ::= identifier
interface_identifier ::= identifier
interface_instance_identifier ::= identifier
inout_port_identifier ::= identifier
input_port_identifier ::= identifier
instance_identifier ::= identifier
library_identifier ::= identifier
member_identifier ::= identifier
method_identifier ::= identifier
modport_identifier ::= identifier
module_identifier ::= identifier
net_identifier ::= identifier
net_type_identifier ::= identifier
output_port_identifier ::= identifier
package_identifier ::= identifier
package_scope ::= package_identifier "::" | "$unit ::"
parameter_identifier ::= identifier
port_identifier ::= identifier
production_identifier ::= identifier
program_identifier ::= identifier
property_identifier ::= identifier
ps_class_identifier ::= [ package_scope ] class_identifier
ps_covergroup_identifier ::= [ package_scope ] covergroup_identifier
ps_checker_identifier ::= [ package_scope ] checker_identifier
ps_identifier ::= [ package_scope ] identifier
ps_or_hierarchical_array_identifier ::= [ implicit_class_handle "." | class_scope | package_scope ] hierarchical_array_identifier
ps_or_hierarchical_net_identifier ::=

      [ package_scope ] net_identifier
    | hierarchical_net_identifier

ps_or_hierarchical_property_identifier ::=

      [ package_scope ] property_identifier
    | hierarchical_property_identifier

ps_or_hierarchical_sequence_identifier ::=

      [ package_scope ] sequence_identifier
    | hierarchical_sequence_identifier

ps_or_hierarchical_tf_identifier ::=

      [ package_scope ] tf_identifier
    | hierarchical_tf_identifier

ps_parameter_identifier ::=

      [ package_scope | class_scope ] parameter_identifier
    | { generate_block_identifier [ "[" constant_expression "]" ] "." } parameter_identifier

ps_type_identifier ::= [ "local" "::" | package_scope | class_scope ] type_identifier
sequence_identifier ::= identifier
signal_identifier ::= identifier

specparam_identifier ::= identifier
system_tf_identifier ::= "$"[ "a"-"zA"-"Z0"-"9_$" ]{ [ "a"-"zA"-"Z0"-"9_$" ] }
task_identifier ::= identifier
tf_identifier ::= identifier
terminal_identifier ::= identifier
topmodule_identifier ::= identifier
type_identifier ::= identifier
udp_identifier ::= identifier
variable_identifier ::= identifier
